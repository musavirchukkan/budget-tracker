version: '3.8'

# üéØ INTERVIEWER SETUP - One Command Local Development
# Usage: docker-compose -f docker-compose.local.yml up --build
# Access: http://localhost:3000 (Frontend) | http://localhost:8000 (API)

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: budget_db_local
    environment:
      POSTGRES_DB: budget_tracker
      POSTGRES_USER: budget_user
      POSTGRES_PASSWORD: budget_local_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data_local:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    networks:
      - budget_network_local
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U budget_user -d budget_tracker"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: budget_redis_local
    command: redis-server --appendonly yes
    volumes:
      - redis_data_local:/data
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    networks:
      - budget_network_local
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile.local
    container_name: budget_backend_local
    environment:
      - DEBUG=True
      - SECRET_KEY=local-development-secret-key-not-for-production
      - DATABASE_URL=postgresql://budget_user:budget_local_pass@db:5432/budget_tracker
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - ./backend:/app
      - backend_static_local:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - budget_network_local
    command: >
      sh -c "
        echo 'üöÄ Starting Django development server...' &&
        python manage.py collectstatic --noinput &&
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py create_test_data &&
        echo '‚úÖ Test data created! Login: test@example.com / testpass123' &&
        python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile.local
    container_name: budget_frontend_local
    environment:
      - VITE_API_URL=http://localhost:8000/api
      - CHOKIDAR_USEPOLLING=true  # For file watching in Docker
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
    ports:
      - "3000:3000"  # Different port for clarity
    depends_on:
      - backend
    networks:
      - budget_network_local
    command: npm run dev -- --host 0.0.0.0 --port 3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Proxy (Optional - for testing production-like setup)
  nginx:
    image: nginx:alpine
    container_name: budget_nginx_local
    volumes:
      - ./docker/nginx/local.conf:/etc/nginx/conf.d/default.conf
      - backend_static_local:/var/www/static
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - budget_network_local
    profiles:
      - nginx  # Only start with: docker-compose --profile nginx up

volumes:
  postgres_data_local:
    name: budget_postgres_local
  redis_data_local:
    name: budget_redis_local
  backend_static_local:
    name: budget_static_local

networks:
  budget_network_local:
    name: budget_network_local
    driver: bridge

# üìù USAGE INSTRUCTIONS:
#
# 1. QUICK START (Interviewer):
#    docker-compose -f docker-compose.local.yml up --build
#    
# 2. ACCESS URLS:
#    Frontend: http://localhost:3000
#    Backend API: http://localhost:8000
#    Admin: http://localhost:8000/admin
#    
# 3. TEST CREDENTIALS:
#    Email: test@example.com
#    Password: testpass123
#    
# 4. CLEANUP:
#    docker-compose -f docker-compose.local.yml down -v
#    
# 5. RESET DATA:
#    docker-compose -f docker-compose.local.yml down -v
#    docker-compose -f docker-compose.local.yml up --build