name: Deploy Budget Tracker

on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual deployment

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node dependencies
      working-directory: ./frontend
      run: |
        npm ci
        
    - name: Run Python tests
      working-directory: ./backend
      run: |
        python manage.py check
        
    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to EC2
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
        
    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
      run: |
        ssh $EC2_USER@$EC2_HOST << 'EOF'
          set -e
          
          # Navigate to application directory
          cd /var/www/budget-tracker
          
          # Pull latest code
          git fetch --all
          git reset --hard origin/main
          
          # Set environment variables
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export SECRET_KEY="${{ secrets.SECRET_KEY }}"
          export DOMAIN_NAME="${{ secrets.DOMAIN_NAME }}"
          
          # Update environment file
          cat > .env << EOL
          SECRET_KEY=${SECRET_KEY}
          DEBUG=False
          ALLOWED_HOSTS=${DOMAIN_NAME},www.${DOMAIN_NAME},${{ secrets.EC2_HOST }}
          DATABASE_URL=postgresql://budget_user:${DB_PASSWORD}@localhost:5432/budget_tracker
          VITE_API_URL=https://${DOMAIN_NAME}/api
          EOL
          
          # Build and deploy
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh
        EOF
        
    - name: Health check
      run: |
        sleep 30
        curl -f https://${{ secrets.DOMAIN_NAME }}/api/health/ || exit 1
        
    - name: Notify deployment
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful to https://${{ secrets.DOMAIN_NAME }}"
        else
          echo "❌ Deployment failed"
          exit 1
        fi